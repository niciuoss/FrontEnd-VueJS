//
//
//
//
//
//
//
//
//

var script = {
  name: 'VueAnnouncer',
  data: function data () {
    return {
      announcer: {
        content: '',
        politeness: 'polite'
      }
    }
  },
  created: function created () {
    this.announcer.politeness = this.$announcer.options.politeness;
    this.$announcer.data = this.announcer;
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    var options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    var hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            var originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            var existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

var isOldIE = typeof navigator !== 'undefined' &&
    /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
    return function (id, style) { return addStyle(id, style); };
}
var HEAD;
var styles = {};
function addStyle(id, css) {
    var group = isOldIE ? css.media || 'default' : id;
    var style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
    if (!style.ids.has(id)) {
        style.ids.add(id);
        var code = css.source;
        if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
                '\n/*# sourceMappingURL=data:application/json;base64,' +
                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                    ' */';
        }
        if (!style.element) {
            style.element = document.createElement('style');
            style.element.type = 'text/css';
            if (css.media)
                { style.element.setAttribute('media', css.media); }
            if (HEAD === undefined) {
                HEAD = document.head || document.getElementsByTagName('head')[0];
            }
            HEAD.appendChild(style.element);
        }
        if ('styleSheet' in style.element) {
            style.styles.push(code);
            style.element.styleSheet.cssText = style.styles
                .filter(Boolean)
                .join('\n');
        }
        else {
            var index = style.ids.size - 1;
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index])
                { style.element.removeChild(nodes[index]); }
            if (nodes.length)
                { style.element.insertBefore(textNode, nodes[index]); }
            else
                { style.element.appendChild(textNode); }
        }
    }
}

/* script */
var __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"announcer",attrs:{"id":"announcer","aria-live":_vm.announcer.politeness},domProps:{"textContent":_vm._s(_vm.announcer.content)}})};
var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = function (inject) {
    if (!inject) { return }
    inject("data-v-332eadba_0", { source: ".announcer[data-v-332eadba]{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}", map: undefined, media: undefined });

  };
  /* scoped */
  var __vue_scope_id__ = "data-v-332eadba";
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  var __vue_component__ = normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    createInjector,
    undefined,
    undefined
  );

var draf = function (cb) { return requestAnimationFrame(function () { return requestAnimationFrame(cb); }); };

var defaultOptions = {
  politeness: 'polite',
  complementRoute: 'has loaded',
  plugins: []
};

var announcerPlugins = {};

function install (Vue, options, router) {
  if ( options === void 0 ) options = {};
  if ( router === void 0 ) router = null;

  if (install.installed) { return }
  install.installed = true;

  // merge options
  options = Object.assign({}, defaultOptions,
    options);

  // Register vue-announcer component
  Vue.component('VueAnnouncer', __vue_component__);

  Vue.prototype.$announcer = {
    data: null,
    options: options,

    set: function set (message, politeness) {
      var this$1 = this;

      if (!this.data) { return }
      this.reset();
      draf(function () {
        this$1.data.politeness = politeness || this$1.data.politeness;
        this$1.data.content = message;
      });
    },

    polite: function polite (message) {
      return this.set(message, 'polite')
    },

    assertive: function assertive (message) {
      return this.set(message, 'assertive')
    },

    reset: function reset () {
      this.data.content = '';
      this.data.politeness = this.options.politeness;
    },

    plugins: announcerPlugins,

    setComplementRoute: function setComplementRoute (complementRoute) {
      if (typeof complementRoute !== 'string') { return }
      options.complementRoute = complementRoute;
    }
  };

  // Register plugins
  if (options.plugins.length) {
    options.plugins.forEach(function (ref) {
      var name = ref.name;
      var handler = ref.handler;

      announcerPlugins[name] = handler.bind(Vue.prototype.$announcer);
    });
  }

  // If set the router, will be announced the change of route
  if (router) {
    router.afterEach(function (to) {
      var announcer = to.meta.announcer || {};

      // Skip: Used, for example, when an async title exists, in which case the announcement is made manually by the set method.
      // It is also possible to achieve the same result, using politeness: 'off', but it will be necessary
      // to set the "assertive" or "polite" when using the set method.
      // for example: this.$announcer.set('my async title', 'polite')
      if (announcer.skip) { return }

      // draf: Resolves the problem of getting the correct document.title when the meta announcer is not passed
      // Tested on Vuepress and Nuxt
      if (Vue.prototype.$isServer) { return }
      setTimeout(function () {
        draf(function () {
          var msg = announcer.message || document.title.trim();
          var complement = announcer.complementRoute || options.complementRoute;
          var politeness = announcer.politeness || null;
          Vue.prototype.$announcer.set((msg + " " + complement), politeness);
        });
      }, 500);
    });
  }
}

// Auto install
if (typeof window !== 'undefined' && typeof window.Vue !== 'undefined') {
  window.Vue.use(install);
}

export default install;
